name: Test Monitoring Setup

on:
  pull_request:
    paths:
      - 'monitoring/**'
      - '.github/workflows/monitoring*.yml'
  workflow_dispatch:

jobs:
  test-monitoring:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio prometheus_client flask requests

      - name: Validate Prometheus config
        run: |
          docker run --rm -v $(pwd)/monitoring/prometheus:/etc/prometheus \
            prom/prometheus:latest \
            --config.file=/etc/prometheus/prometheus.yml \
            check-config

      - name: Validate Alertmanager config
        run: |
          docker run --rm -v $(pwd)/monitoring/prometheus:/etc/alertmanager \
            prom/alertmanager:latest \
            --config.file=/etc/alertmanager/alertmanager.yml \
            check-config

      - name: Test metrics generation
        run: |
          python -c '
          from prometheus_client import Counter, Histogram, Gauge
          import time
          
          # Test metric creation
          counter = Counter("test_counter", "Test counter")
          histogram = Histogram("test_histogram", "Test histogram")
          gauge = Gauge("test_gauge", "Test gauge")
          
          # Test metric operations
          counter.inc()
          with histogram.time():
              time.sleep(0.1)
          gauge.set(42)
          
          print("Metrics test passed")
          '

      - name: Test alert rules
        run: |
          python -c '
          import yaml
          import sys
          
          def validate_alert_rule(rule):
              required_fields = ["alert", "expr", "for", "labels", "annotations"]
              for field in required_fields:
                  if field not in rule:
                      raise ValueError(f"Missing required field: {field}")
              
              if "severity" not in rule["labels"]:
                  raise ValueError("Missing severity label")
              
              if "summary" not in rule["annotations"] or "description" not in rule["annotations"]:
                  raise ValueError("Missing summary or description annotation")
          
          with open("monitoring/prometheus/alert.rules") as f:
              rules = yaml.safe_load(f)
          
          for group in rules["groups"]:
              for rule in group["rules"]:
                  validate_alert_rule(rule)
          
          print("Alert rules validation passed")
          '

      - name: Test alert receiver
        run: |
          # Start alert receiver
          python monitoring/alert_receiver.py &
          sleep 2
          
          # Send test alert
          curl -X POST -H "Content-Type: application/json" \
            -d '{"test": true}' \
            http://localhost:5001/
          
          # Check if alert was received
          if [ -f monitoring/alerts.log ]; then
            echo "Alert receiver test passed"
          else
            echo "Alert receiver test failed"
            exit 1
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: monitoring/logs/
          retention-days: 7 